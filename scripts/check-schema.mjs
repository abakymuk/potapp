/* eslint-env node */
/* eslint-disable no-undef */

import { createClient } from '@supabase/supabase-js'

const url = process.env.SUPABASE_URL
const key = process.env.SUPABASE_ANON_KEY

if (!url || !key) {
  console.error('‚ùå SUPABASE_URL –∏ SUPABASE_ANON_KEY –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
  process.exit(1)
}

const supabase = createClient(url, key)

async function checkSchema() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î...\n')

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const { data: extensions, error: extError } = await supabase
      .from('pg_extension')
      .select('extname')
      .in('extname', ['vector', 'citext', 'pg_stat_statements'])

    if (extError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:', extError.message)
    } else {
      console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏—è:', extensions.map((e) => e.extname).join(', '))
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
    const { data: types, error: typeError } = await supabase
      .from('pg_type')
      .select('typname')
      .in('typname', ['membership_role_enum', 'order_status_enum'])

    if (typeError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã:', typeError.message)
    } else {
      console.log('‚úÖ –¢–∏–ø—ã:', types.map((t) => t.typname).join(', '))
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const tables = [
      'tenants',
      'users',
      'memberships',
      'sites',
      'menus',
      'items',
      'orders',
      'order_items',
      'events',
    ]

    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü:')
    for (const table of tables) {
      try {
        const { error } = await supabase.from(table).select('id').limit(1)

        if (error) {
          console.log(`‚ùå ${table}: ${error.message}`)
        } else {
          console.log(`‚úÖ ${table}: OK`)
        }
      } catch (err) {
        console.log(`‚ùå ${table}: ${err.message}`)
      }
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message)
    process.exit(1)
  }
}

checkSchema()
